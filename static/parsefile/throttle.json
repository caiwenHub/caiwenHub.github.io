{"content":"<h1 id=\"节流函数\">节流函数</h1>\n<h2 id=\"介绍\">介绍</h2>\n<p><strong>定义</strong>：把一段时间分成多个切片，在这些切片里面多次触发只执行一次。<br><strong>场景</strong>：按钮连续点击、事件监听（resize...）等防止事件频繁触发的场景。</p>\n<h2 id=\"实现\">实现</h2>\n<ul>\n<li>第一种实现方式</li>\n</ul>\n<pre><code class=\"hljs js\"><span class=\"hljs-comment\">/**\n * 节流函数\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">*</span>} <span class=\"hljs-variable\">fn</span>\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">*</span>} <span class=\"hljs-variable\">delay</span>\n * <span class=\"hljs-doctag\">@param</span> {<span class=\"hljs-type\">*</span>} immediate 是否先执行\n * <span class=\"hljs-doctag\">@returns</span>\n */</span>\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">throttle</span> = (<span class=\"hljs-params\">fn, delay, immediate</span>) =&gt; {\n  <span class=\"hljs-keyword\">let</span> timer = <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">throttleFn</span> = (<span class=\"hljs-params\">...args</span>) =&gt; {\n    <span class=\"hljs-keyword\">if</span> (timer) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-keyword\">if</span> (immediate) {\n      <span class=\"hljs-title function_\">fn</span>(...args);\n      timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n        timer = <span class=\"hljs-literal\">null</span>;\n      }, delay);\n    } <span class=\"hljs-keyword\">else</span> {\n      timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n        <span class=\"hljs-title function_\">fn</span>(...args);\n        <span class=\"hljs-built_in\">clearTimeout</span>(timer);\n        timer = <span class=\"hljs-literal\">null</span>;\n      }, delay);\n    }\n  };\n  <span class=\"hljs-keyword\">return</span> throttleFn;\n};\n</code></pre>\n<ul>\n<li>第二种实现方式</li>\n</ul>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">throttle2</span> = (<span class=\"hljs-params\">fn, delay</span>) =&gt; {\n  <span class=\"hljs-keyword\">let</span> timer = <span class=\"hljs-literal\">null</span>;\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">throttle2Fn</span> = (<span class=\"hljs-params\">...args</span>) =&gt; {\n    <span class=\"hljs-keyword\">const</span> curTime = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>().<span class=\"hljs-title function_\">getTime</span>();\n    <span class=\"hljs-keyword\">if</span> (!timer) timer = curTime;\n    <span class=\"hljs-keyword\">if</span> (curTime - timer &lt;= delay) <span class=\"hljs-keyword\">return</span>;\n    <span class=\"hljs-title function_\">fn</span>(...args);\n    timer = <span class=\"hljs-literal\">null</span>;\n  };\n  <span class=\"hljs-keyword\">return</span> throttle2Fn;\n};\n</code></pre>\n<p>第一种方式，在停止事件触发后，定时器还没有清除，所以还会在执行一次<br>第二种方式，在停止事件触发后，不会再继续执行最后一次操作，但是每一次触发都是先执行一次。</p>\n<h2 id=\"用例\">用例</h2>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">handleMouseMove</span> = (<span class=\"hljs-params\"></span>) =&gt; {\n  <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;throttle&quot;</span>);\n};\n<span class=\"hljs-keyword\">const</span> handleMouseMoveThrottle = <span class=\"hljs-title function_\">throttle2</span>(handleMouseMove, <span class=\"hljs-number\">1000</span>, <span class=\"hljs-literal\">true</span>);\n<span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&quot;mousemove&quot;</span>, handleMouseMoveThrottle, <span class=\"hljs-literal\">false</span>);\n</code></pre>\n","fileName":"throttle"}