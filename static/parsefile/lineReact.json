{"content":"<h1 id=\"33-行react剖析\">33 行&quot;React&quot;剖析</h1>\n<h2 id=\"源码链接\">源码链接</h2>\n<blockquote>\n<p>无注释： <a href=\"https://github.com/leontrolski/leontrolski.github.io/blob/master/33-line-react.js\">https://github.com/leontrolski/leontrolski.github.io/blob/master/33-line-react.js</a><br>有注释：<a href=\"https://github.com/leontrolski/leontrolski.github.io/blob/master/33-line-react-with-comments.js\">https://github.com/leontrolski/leontrolski.github.io/blob/master/33-line-react-with-comments.js</a></p>\n</blockquote>\n<h2 id=\"方法解析\">方法解析</h2>\n<p><strong>1. VNode 初始化</strong></p>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">m</span> = (<span class=\"hljs-params\">...args</span>) =&gt; {\n  <span class=\"hljs-keyword\">let</span> [attrs, [head, ...tail]] = [{}, args];\n  <span class=\"hljs-comment\">// 第一个参数是VNode标签和className的组合：li.class1.class2</span>\n  <span class=\"hljs-keyword\">let</span> [tag, ...classes] = head.<span class=\"hljs-title function_\">split</span>(<span class=\"hljs-string\">&quot;.&quot;</span>);\n  <span class=\"hljs-comment\">// 第二个参数是VNode的属性，后面的其他的参数则是子元素</span>\n  <span class=\"hljs-comment\">// 判断第二个参数是不是一个合法的对象</span>\n  <span class=\"hljs-keyword\">if</span> (tail.<span class=\"hljs-property\">length</span> &amp;&amp; !m.<span class=\"hljs-title function_\">isRenderable</span>(tail[<span class=\"hljs-number\">0</span>])) [attrs, ...tail] = tail;\n  <span class=\"hljs-comment\">// 提取class写入classes，方便后续更新操作</span>\n  <span class=\"hljs-keyword\">if</span> (attrs.<span class=\"hljs-property\">class</span>) classes = [...classes, ...attrs.<span class=\"hljs-property\">class</span>];\n  attrs = { ...attrs };\n  <span class=\"hljs-keyword\">delete</span> attrs.<span class=\"hljs-property\">class</span>;\n  <span class=\"hljs-keyword\">const</span> children = [];\n  <span class=\"hljs-comment\">/**\n   * <span class=\"hljs-doctag\">@params</span> {<span class=\"hljs-type\">any</span>} v 子元素，VNode或者text\n   * 如果是null则不做操作\n   * 如果是数组则递归的初始化子元素\n   * 添加到childre\n   */</span>\n  <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title function_\">addChildren</span> = (<span class=\"hljs-params\">v</span>) =&gt;\n    v === <span class=\"hljs-literal\">null</span>\n      ? <span class=\"hljs-literal\">null</span>\n      : <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(v)\n      ? v.<span class=\"hljs-title function_\">map</span>(addChildren)\n      : children.<span class=\"hljs-title function_\">push</span>(v);\n  <span class=\"hljs-title function_\">addChildren</span>(tail);\n  <span class=\"hljs-comment\">// 返回的VNode，__m标志通过m初始化的VNode</span>\n  <span class=\"hljs-keyword\">return</span> { <span class=\"hljs-attr\">__m</span>: <span class=\"hljs-literal\">true</span>, <span class=\"hljs-attr\">tag</span>: tag || <span class=\"hljs-string\">&quot;div&quot;</span>, attrs, classes, children };\n};\n</code></pre>\n<p>传入特定结构的数据，经过一系列操作之后，生成 Vnode，用例如下：</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-title function_\">m</span>({\n  <span class=\"hljs-string\">&quot;div&quot;</span>,\n  {<span class=\"hljs-attr\">onClick</span>: <span class=\"hljs-function\">() =&gt;</span> {}},\n  <span class=\"hljs-string\">&quot;text&quot;</span>,\n  [\n    {\n      <span class=\"hljs-string\">&quot;div&quot;</span>,\n      {<span class=\"hljs-attr\">onClick</span>: <span class=\"hljs-function\">() =&gt;</span> {}},\n      <span class=\"hljs-string\">&quot;text&quot;</span>,\n    },\n    <span class=\"hljs-string\">&quot;text&quot;</span>\n  ]\n})\n</code></pre>\n<p><strong>2. render 挂载&amp;渲染</strong></p>\n<pre><code class=\"hljs js\">m.<span class=\"hljs-property\">render</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">parent, v</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">// parent是真实的dom节点，v是m初始化后的VNode</span>\n  <span class=\"hljs-comment\">// 提取两个节点的子节点，用于比较，这里可以看出，m初始化的第一个元素没有进行挂载，可以传空字符</span>\n  <span class=\"hljs-keyword\">const</span> olds = parent.<span class=\"hljs-property\">childNodes</span> || [];\n  <span class=\"hljs-keyword\">const</span> news = v.<span class=\"hljs-property\">children</span> || [];\n  <span class=\"hljs-comment\">// 以新节点的长度为准，处理parent子节点列表的长度，保证小于等于新子节点列表长度</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> _ <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">Array</span>(<span class=\"hljs-title class_\">Math</span>.<span class=\"hljs-title function_\">max</span>(<span class=\"hljs-number\">0</span>, olds.<span class=\"hljs-property\">length</span> - news.<span class=\"hljs-property\">length</span>)))\n    parent.<span class=\"hljs-title function_\">removeChild</span>(parent.<span class=\"hljs-property\">lastChild</span>);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> [i, child] <span class=\"hljs-keyword\">of</span> news.<span class=\"hljs-title function_\">entries</span>()) {\n    <span class=\"hljs-comment\">// 创建节点，索引对应的老节点不存在则创建新的节点</span>\n    <span class=\"hljs-keyword\">let</span> el = olds[i] || m.<span class=\"hljs-title function_\">makeEl</span>(child);\n    <span class=\"hljs-comment\">// 添加节点，索引对应的老节点不存在则在真实dom节点添加新节点</span>\n    <span class=\"hljs-keyword\">if</span> (!olds[i]) parent.<span class=\"hljs-title function_\">appendChild</span>(el);\n    <span class=\"hljs-comment\">// 替换节点，新旧节点都存在，则比较tagName</span>\n    <span class=\"hljs-keyword\">const</span> mismatch = (el.<span class=\"hljs-property\">tagName</span> || <span class=\"hljs-string\">&quot;&quot;</span>) !== (child.<span class=\"hljs-property\">tag</span> || <span class=\"hljs-string\">&quot;&quot;</span>).<span class=\"hljs-title function_\">toUpperCase</span>();\n    <span class=\"hljs-keyword\">if</span> (mismatch) (el = m.<span class=\"hljs-title function_\">makeEl</span>(child)) &amp;&amp; parent.<span class=\"hljs-title function_\">replaceChild</span>(el, olds[i]);\n    <span class=\"hljs-comment\">// 对节点进行更新操作</span>\n    m.<span class=\"hljs-title function_\">update</span>(el, child);\n    <span class=\"hljs-comment\">// 递归调用节点挂载操作</span>\n    m.<span class=\"hljs-title function_\">render</span>(el, child);\n  }\n};\n</code></pre>\n<p>m 是 function 也是对象，可直接在 m 上添加方法。<br>传入新旧两个节点，通过对比两个节点的异同，进行更新和渲染操作</p>\n<p><strong>3. update 更新</strong></p>\n<pre><code class=\"hljs js\">m.<span class=\"hljs-property\">update</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">el, v</span>) =&gt;</span> {\n  <span class=\"hljs-keyword\">if</span> (!v.<span class=\"hljs-property\">__m</span>) <span class=\"hljs-keyword\">return</span> el.<span class=\"hljs-property\">data</span> === <span class=\"hljs-string\">`<span class=\"hljs-subst\">${v}</span>`</span> || (el.<span class=\"hljs-property\">data</span> = v);\n  <span class=\"hljs-comment\">// 对比两个节点的classname列表，进行删减操作</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> name <span class=\"hljs-keyword\">of</span> v.<span class=\"hljs-property\">classes</span>)\n    <span class=\"hljs-keyword\">if</span> (!el.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">contains</span>(name)) el.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">add</span>(name);\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> name <span class=\"hljs-keyword\">of</span> el.<span class=\"hljs-property\">classList</span>)\n    <span class=\"hljs-keyword\">if</span> (!v.<span class=\"hljs-property\">classes</span>.<span class=\"hljs-title function_\">includes</span>(name)) el.<span class=\"hljs-property\">classList</span>.<span class=\"hljs-title function_\">remove</span>(name);\n  <span class=\"hljs-comment\">// 对比两个节点的属性对象，进行属性替换操作</span>\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> name <span class=\"hljs-keyword\">of</span> <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(v.<span class=\"hljs-property\">attrs</span>))\n    <span class=\"hljs-keyword\">if</span> (el[name] !== v.<span class=\"hljs-property\">attrs</span>[name]) el[name] = v.<span class=\"hljs-property\">attrs</span>[name];\n  <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">const</span> { name } <span class=\"hljs-keyword\">of</span> el.<span class=\"hljs-property\">attributes</span>)\n    <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-title function_\">keys</span>(v.<span class=\"hljs-property\">attrs</span>).<span class=\"hljs-title function_\">includes</span>(name) &amp;&amp; name !== <span class=\"hljs-string\">&quot;class&quot;</span>)\n      el.<span class=\"hljs-title function_\">removeAttribute</span>(name);\n};\n</code></pre>\n<p>更新节点，则是对属性和 class 进行操作</p>\n<p><strong>4. 创建节点</strong></p>\n<pre><code class=\"hljs js\">m.<span class=\"hljs-property\">makeEl</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span>\n  v.<span class=\"hljs-property\">__m</span> ? <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(v.<span class=\"hljs-property\">tag</span>) : <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createTextNode</span>(v);\n</code></pre>\n<p><strong>5. 属性校验</strong></p>\n<pre><code class=\"hljs js\">m.<span class=\"hljs-property\">isRenderable</span> = <span class=\"hljs-function\">(<span class=\"hljs-params\">v</span>) =&gt;</span>\n  v === <span class=\"hljs-literal\">null</span> ||\n  [<span class=\"hljs-string\">&quot;string&quot;</span>, <span class=\"hljs-string\">&quot;number&quot;</span>].<span class=\"hljs-title function_\">includes</span>(<span class=\"hljs-keyword\">typeof</span> v) ||\n  v.<span class=\"hljs-property\">__m</span> ||\n  <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(v);\n</code></pre>\n<h2 id=\"用例\">用例</h2>\n<pre><code class=\"hljs html\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">html</span> <span class=\"hljs-attr\">lang</span>=<span class=\"hljs-string\">&quot;en&quot;</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">head</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">charset</span>=<span class=\"hljs-string\">&quot;UTF-8&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">http-equiv</span>=<span class=\"hljs-string\">&quot;X-UA-Compatible&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;IE=edge&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">meta</span> <span class=\"hljs-attr\">name</span>=<span class=\"hljs-string\">&quot;viewport&quot;</span> <span class=\"hljs-attr\">content</span>=<span class=\"hljs-string\">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">title</span>&gt;</span>Document<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">title</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">head</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">body</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"language-javascript\">\n      <span class=\"hljs-comment\">// 此处省略了33行react的引入</span>\n      <span class=\"hljs-keyword\">const</span> vnode = <span class=\"hljs-title function_\">m</span>({\n        <span class=\"hljs-string\">&quot;div&quot;</span>,\n        {<span class=\"hljs-attr\">onClick</span>: <span class=\"hljs-function\">() =&gt;</span> {}},\n        <span class=\"hljs-string\">&quot;text&quot;</span>,\n        [\n          {\n            <span class=\"hljs-string\">&quot;div&quot;</span>,\n            {<span class=\"hljs-attr\">onClick</span>: <span class=\"hljs-function\">() =&gt;</span> {}},\n            <span class=\"hljs-string\">&quot;text&quot;</span>,\n          },\n          <span class=\"hljs-string\">&quot;text&quot;</span>\n        ]\n      })\n      m.<span class=\"hljs-title function_\">render</span>(<span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementById</span>(<span class=\"hljs-string\">&quot;app&quot;</span>), vnode)\n    </span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n  <span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">body</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">html</span>&gt;</span>\n</code></pre>\n","fileName":"lineReact"}