{"content":"<h1 id=\"博客介绍\">博客介绍</h1>\n<p>使用 github pages 搭建站点，记录平日心得，不断总结提升自我。</p>\n<p>本网站为了用户体验而牺牲的 seo 优化，使用 vue3 搭建的单页网站。</p>\n<h2 id=\"方案流程\">方案&amp;流程</h2>\n<ol>\n<li>文档处理</li>\n</ol>\n<ul>\n<li>通过 cli，终端交互新建 md 文件，文件名即目录</li>\n<li>使用 markdown 编写文档</li>\n<li>读取 md 文件，通过文件名生成对应的目录</li>\n<li>使用 marked 插件解析 md 文档成 html</li>\n<li>使用 highlight.js 高亮代码</li>\n</ul>\n<ol start=\"2\">\n<li>发布流程</li>\n</ol>\n<ul>\n<li>自建 cli</li>\n<li>node 自动读取 md 文件并解析目录和返回 json 文件</li>\n<li>代码自动打包生成 dist 目录，修改 push 到代码库</li>\n<li>dist 目录资源通过 shell 命令拷贝到本地静态资源库</li>\n<li>静态资源库 push 到 github</li>\n<li>通过链接访问博客网站</li>\n</ul>\n<h2 id=\"cli-工具\">cli 工具</h2>\n<p><strong>需要实例的话，可以借鉴 vue-cli 脚手架</strong></p>\n<blockquote>\n<p>commander 读取终端命令行工具<br>inquirer 终端交互式命令行工具<br>chalk 命令行颜色插件<br>minimist 命令行参数处理<br>shelljs 执行 shell 命令，如&quot;npm run start&quot;,&quot;git clone&quot;</p>\n</blockquote>\n<h2 id=\"实现方案主要步骤\">实现方案主要步骤</h2>\n<ul>\n<li><p>github 新建项目<br>myblog: private 项目，存放源码和 md 文件<br>(唯一名称).github.io: public 项目，存放静态资源，详情介绍见<a href=\"https://pages.github.com/\">https://pages.github.com/</a></p>\n</li>\n<li><p>myblog 目录结构</p>\n</li>\n</ul>\n<pre><code>blog\n├─ README.md\n├─ babel.config.js\n├─ cli // 创建文件，自动化解析和部署脚手架目录\n├─ dist // npm run build后生成的文件同步到xxx.github.io里面的静态资源\n├─ lib // 解析md文件目录\n├─ public\n├─ src\n│  ├─ assets\n│  ├─ components\n│  ├─ main.js\n│  ├─ mixins\n│  ├─ mock\n│  ├─ pages\n│  ├─ router\n│  ├─ store\n│  ├─ styles\n│  └─ utils\n├─ static\n│  ├─ data-config\n│  │  └─ nav.json // 解析后的目录文件\n│  ├─ md-file // md原文件\n│  └─ parsefile // 解析md后的json文件\n└─ vue.config.js\n</code></pre>\n<ul>\n<li>md 文件转换成 html</li>\n</ul>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">const</span> marked = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;marked&quot;</span>);\n<span class=\"hljs-keyword\">const</span> hljs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;highlight.js&quot;</span>);\n<span class=\"hljs-comment\">/**\n * 代码高亮配置\n */</span>\nhljs.configure({\n  <span class=\"hljs-attr\">tabReplace</span>: <span class=\"hljs-string\">&quot;  &quot;</span>,\n  <span class=\"hljs-attr\">classPrefix</span>: <span class=\"hljs-string\">&quot;hljs-&quot;</span>,\n  <span class=\"hljs-attr\">languages</span>: [\n    <span class=\"hljs-string\">&quot;CSS&quot;</span>,\n    <span class=\"hljs-string\">&quot;HTML, XML&quot;</span>,\n    <span class=\"hljs-string\">&quot;JavaScript&quot;</span>,\n    <span class=\"hljs-string\">&quot;PHP&quot;</span>,\n    <span class=\"hljs-string\">&quot;Python&quot;</span>,\n    <span class=\"hljs-string\">&quot;Stylus&quot;</span>,\n    <span class=\"hljs-string\">&quot;TypeScript&quot;</span>,\n    <span class=\"hljs-string\">&quot;Markdown&quot;</span>,\n  ],\n});\n<span class=\"hljs-comment\">/**\n * marked初始化， 并引入高亮配置\n */</span>\nmarked.setOptions({\n  <span class=\"hljs-attr\">renderer</span>: <span class=\"hljs-keyword\">new</span> marked.Renderer(),\n  <span class=\"hljs-attr\">highlight</span>: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">code, lang</span>) </span>{\n    <span class=\"hljs-keyword\">const</span> hljs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;highlight.js&quot;</span>);\n    <span class=\"hljs-keyword\">const</span> language = hljs.getLanguage(lang) ? lang : <span class=\"hljs-string\">&quot;plaintext&quot;</span>;\n    <span class=\"hljs-keyword\">return</span> hljs.highlight(code, { language }).value;\n  },\n  <span class=\"hljs-attr\">langPrefix</span>: <span class=\"hljs-string\">&quot;hljs &quot;</span>,\n  <span class=\"hljs-attr\">pedantic</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">gfm</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">tables</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">breaks</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">sanitize</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">smartLists</span>: <span class=\"hljs-literal\">true</span>,\n  <span class=\"hljs-attr\">smartypants</span>: <span class=\"hljs-literal\">false</span>,\n  <span class=\"hljs-attr\">xhtml</span>: <span class=\"hljs-literal\">false</span>,\n});\n<span class=\"hljs-comment\">/**\n * md内容转换成html\n * <span class=\"hljs-doctag\">@returns</span>\n */</span>\n<span class=\"hljs-keyword\">const</span> tranformMD = <span class=\"hljs-function\">() =&gt;</span> {\n  <span class=\"hljs-keyword\">const</span> results = files.map(<span class=\"hljs-function\">(<span class=\"hljs-params\">file</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">const</span> filePath = path.resolve(__dirname, <span class=\"hljs-string\">&quot;../static/md-file&quot;</span>, file);\n    <span class=\"hljs-keyword\">const</span> fileStr = fs.readFileSync(filePath, <span class=\"hljs-string\">&quot;utf-8&quot;</span>);\n    <span class=\"hljs-keyword\">const</span> filename = file.split(<span class=\"hljs-string\">&quot;_&quot;</span>).pop();\n    <span class=\"hljs-keyword\">const</span> [key] = filename.split(<span class=\"hljs-string\">&quot;&amp;&quot;</span>);\n    <span class=\"hljs-keyword\">if</span> (filename.indexOf(<span class=\"hljs-string\">&quot;babel&quot;</span>) &gt;= <span class=\"hljs-number\">0</span>) {\n      <span class=\"hljs-built_in\">console</span>.log(marked(fileStr));\n    }\n    <span class=\"hljs-keyword\">const</span> content = marked(fileStr);\n    <span class=\"hljs-keyword\">return</span> {\n      content,\n      <span class=\"hljs-attr\">fileName</span>: key,\n    };\n  });\n  <span class=\"hljs-keyword\">return</span> results;\n};\n</code></pre>\n<h2 id=\"文件创建流程\">文件创建流程</h2>\n<pre><code class=\"hljs shell\">qihoodeMacBook-Pro:blog caiwen1$ node ./cli/ create\n? 请选择一级菜单 前端基础\n? 请选择二级菜单 js\n? 当前文件名为“base&amp;前端基础_js&amp;js”，是否新建下一级？ (Y/n)\nqihoodeMacBook-Pro:blog caiwen1$\nqihoodeMacBook-Pro:blog caiwen1$ node ./cli/ create\n? 请选择一级菜单 前端基础\n? 请选择二级菜单 新建\n? 请输入新增的key值，英文字符： funLibrary\n? 请输入新增的名称： 公共函数\n? 当前文件名为“base&amp;前端基础_funLibrary&amp;公共函数”，是否新建下一级？ Yes\n? 请输入新增的key值，英文字符： debounce\n? 请输入新增的名称： js防抖\n? 当前文件名为“base&amp;前端基础_funLibrary&amp;公共函数_debounce&amp;js防抖.md”，是否直接新建文件？ Yes\n创建base&amp;前端基础_funLibrary&amp;公共函数_debounce&amp;js防抖.md成功！\n</code></pre>\n","fileName":"indexContent"}