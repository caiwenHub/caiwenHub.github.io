{"content":"<h1 id=\"开发、测试、生产环境区分\">开发、测试、生产环境区分</h1>\n<h2 id=\"插件安装\">插件安装</h2>\n<blockquote>\n<p>npm install cross-env -D</p>\n</blockquote>\n<h2 id=\"配置\">配置</h2>\n<ul>\n<li>在 <strong>package.json</strong> 的 <strong>scripts</strong> 中配置命令</li>\n</ul>\n<pre><code class=\"hljs json\"><span class=\"hljs-punctuation\">{</span>\n  <span class=\"hljs-attr\">&quot;scripts&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-punctuation\">{</span>\n    <span class=\"hljs-attr\">&quot;build&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;cross-env NODE_ENV=production webpack --config ./webpack.config.js&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;build:test&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;cross-env NODE_ENV=test webpack --config ./webpack.config.js&quot;</span><span class=\"hljs-punctuation\">,</span>\n    <span class=\"hljs-attr\">&quot;build:dev&quot;</span><span class=\"hljs-punctuation\">:</span> <span class=\"hljs-string\">&quot;cross-env NODE_ENV=test webpack --config ./webpack.config.js&quot;</span>\n  <span class=\"hljs-punctuation\">}</span>\n<span class=\"hljs-punctuation\">}</span>\n</code></pre>\n<ul>\n<li>在 <strong>webpack.config.js</strong> 通过 <strong>process.env.NODE_ENV</strong> 区分使用哪一种环境配置，通常测试环境和生产环境的配置基本上一样，在处理 <strong>source map</strong> 上有区分</li>\n</ul>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">const</span> dev = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./build/webpack.dev&quot;</span>);\n<span class=\"hljs-keyword\">const</span> prod = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&quot;./build/webpack.prod&quot;</span>);\n\n<span class=\"hljs-keyword\">const</span> <span class=\"hljs-variable constant_\">IS_DEV</span> = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">NODE_ENV</span> === <span class=\"hljs-string\">&quot;development&quot;</span>;\n<span class=\"hljs-variable language_\">module</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-variable constant_\">IS_DEV</span> ? dev : prod;\n</code></pre>\n<p><strong>cross-env</strong> 只是在 node 环境生效，也就是打包之前的访问。如果需要在项目内生效，可以使用 <strong>webpack.DefinePlugin</strong> 插件，定义全局常亮，注意不是挂在到 <strong>windows</strong> 对象上。这样可以分环境处理日志、开启<strong>debug</strong>。</p>\n<ul>\n<li>使用</li>\n</ul>\n<pre><code class=\"hljs js\">{\n  <span class=\"hljs-attr\">plugins</span>: [\n    <span class=\"hljs-keyword\">new</span> webpack.<span class=\"hljs-title class_\">DefinePlugin</span>({\n      <span class=\"hljs-string\">&quot;process.env&quot;</span>: {\n        <span class=\"hljs-attr\">NODE_ENV</span>: <span class=\"hljs-variable constant_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">NODE_ENV</span>),\n      },\n    }),\n  ];\n}\n</code></pre>\n<ul>\n<li>在项目文件中引入 vconsole</li>\n</ul>\n<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">import</span> vconsole <span class=\"hljs-keyword\">from</span> <span class=\"hljs-string\">&quot;vconsole&quot;</span>;\n\n<span class=\"hljs-keyword\">const</span> env = process.<span class=\"hljs-property\">env</span>.<span class=\"hljs-property\">NODE_ENV</span>;\n\n<span class=\"hljs-keyword\">if</span> (env !== <span class=\"hljs-string\">&quot;production&quot;</span>) <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title function_\">vconsole</span>();\n</code></pre>\n","fileName":"env"}