{"content":"<h1 id=\"渲染逻辑\">渲染逻辑</h1>\n<h2 id=\"原生-js-渲染\">原生 js 渲染</h2>\n<p>原生 js 的渲染是一个同步的过程，在 js 代码中修改 dom 数据，直接遍历 dom 修改节点。如果修改的操作比较频繁呢？比如插入一个大列表，这个操作对浏览器的性能有很大影响，不停的遍历节点，不停的修改。<br>像这种大列表的渲染有以下方式</p>\n<ol>\n<li>分页请求，懒加载</li>\n<li>一般是调用 document.createDocumentFragment 创建一个文档片段，在内存中生成文档后再通过 appendChild/insertBefore 一次性挂载在实际的 dom 节点</li>\n</ol>\n<h2 id=\"vue-中的渲染\">vue 中的渲染</h2>\n<p>vue 维护了自己的一套虚拟 dom，遍历的属性相对减少。其次通过观察者模式，在 Object.defineProperty 定义的访问器属性 getter 中收集依赖，在 setter 中触发更新。这里的更新是一个异步的过程，将本次事件循环的更新在内存中依次通过 diff 算法修改对应的 dom 节点，通过调用 nextTick 实现虚拟 dom 在真实 dom 中的更新</p>\n","fileName":"render"}