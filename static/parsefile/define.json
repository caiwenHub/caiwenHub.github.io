{"content":"<pre><code class=\"hljs js\"><span class=\"hljs-keyword\">var</span> fwjs, <span class=\"hljs-built_in\">require</span>, define;\n(<span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"><span class=\"hljs-variable language_\">global</span></span>) {\n    <span class=\"hljs-keyword\">var</span> req, \n        ob = <span class=\"hljs-title class_\">Object</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>,\n        toString = ob.<span class=\"hljs-property\">toString</span>,\n        hasOwn = ob.<span class=\"hljs-property\">hasOwnProperty</span>,\n        version = <span class=\"hljs-string\">&quot;1.0.0&quot;</span>,\n        contexts = {},\n        head = <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">getElementsByTagName</span>(<span class=\"hljs-string\">&#x27;head&#x27;</span>)[<span class=\"hljs-number\">0</span>],\n        globalDefQueue = [],\n        defContextName =<span class=\"hljs-string\">&quot;_&quot;</span>;\n\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isFunction</span>(<span class=\"hljs-params\">f</span>) {\n        <span class=\"hljs-keyword\">return</span> toString.<span class=\"hljs-title function_\">call</span>(f) == <span class=\"hljs-string\">&quot;[object Function]&quot;</span>\n    }\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">isArray</span>(<span class=\"hljs-params\">arr</span>) {\n        <span class=\"hljs-keyword\">return</span> toString.<span class=\"hljs-title function_\">call</span>(arr) == <span class=\"hljs-string\">&quot;[object Array]&quot;</span>\n    }\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getOwn</span>(<span class=\"hljs-params\">obj, prop</span>) {\n        <span class=\"hljs-keyword\">return</span> hasOwn.<span class=\"hljs-title function_\">call</span>(obj, prop) &amp;&amp; obj[prop];\n    }\n    <span class=\"hljs-comment\">// 创建script节点</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createScriptNode</span>(<span class=\"hljs-params\"></span>){\n        <span class=\"hljs-keyword\">var</span> node =  <span class=\"hljs-variable language_\">document</span>.<span class=\"hljs-title function_\">createElement</span>(<span class=\"hljs-string\">&#x27;script&#x27;</span>);\n        node.<span class=\"hljs-property\">type</span> = <span class=\"hljs-string\">&#x27;text/javascript&#x27;</span>;\n        node.<span class=\"hljs-property\">charset</span> = <span class=\"hljs-string\">&#x27;utf-8&#x27;</span>;\n        node.<span class=\"hljs-property\">async</span> = <span class=\"hljs-literal\">true</span>;\n        <span class=\"hljs-keyword\">return</span> node;\n    }\n    <span class=\"hljs-comment\">// 载入js文件</span>\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">loadScript</span>(<span class=\"hljs-params\">fn, moduleName, url</span>){\n        <span class=\"hljs-keyword\">var</span> node = <span class=\"hljs-title function_\">createScriptNode</span>();\n        node.<span class=\"hljs-title function_\">setAttribute</span>(<span class=\"hljs-string\">&#x27;data-fwmodule&#x27;</span>, moduleName);\n        node.<span class=\"hljs-title function_\">addEventListener</span>(<span class=\"hljs-string\">&#x27;load&#x27;</span>, fn, <span class=\"hljs-literal\">false</span>);\n        node.<span class=\"hljs-property\">src</span> = url;\n        head.<span class=\"hljs-title function_\">appendChild</span>(node)\n    }\n    <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">createContext</span>(<span class=\"hljs-params\"></span>){\n        <span class=\"hljs-keyword\">var</span> context = {},\n            registry = {},\n            undefEvents = {},\n            defined = {},\n            urlLoaded = {},\n            defQueue=[],\n            requireCounter = <span class=\"hljs-number\">1</span>\n        ;\n        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">makeModuleMap</span>(<span class=\"hljs-params\">name, parentModuleMap</span>){\n            <span class=\"hljs-keyword\">var</span> isDefine = <span class=\"hljs-literal\">true</span>,\n                normalizedName = <span class=\"hljs-string\">&quot;&quot;</span>,\n                originalName = name,\n                url = name,\n                parentName = parentModuleMap ? parentModuleMap.<span class=\"hljs-property\">name</span> : <span class=\"hljs-string\">&quot;&quot;</span>;\n            <span class=\"hljs-keyword\">if</span> (!name) {\n                    isDefine = <span class=\"hljs-literal\">false</span>;\n                    name = <span class=\"hljs-string\">&#x27;fw&#x27;</span> + (requireCounter += <span class=\"hljs-number\">1</span>);\n            }\n            <span class=\"hljs-comment\">// 在这里并没有对id和name进行处理 主要是不支持config</span>\n            <span class=\"hljs-keyword\">return</span> {\n                <span class=\"hljs-attr\">name</span>: name,\n                <span class=\"hljs-attr\">parentMap</span>: parentModuleMap,\n                url,\n                <span class=\"hljs-attr\">originalName</span>: originalName,\n                <span class=\"hljs-attr\">isDefine</span>: isDefine,\n                <span class=\"hljs-attr\">id</span>: name\n            };\n        }\n        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getModule</span>(<span class=\"hljs-params\">depMap</span>) {\n            <span class=\"hljs-keyword\">var</span> id = depMap.<span class=\"hljs-property\">id</span>,\n                mod = <span class=\"hljs-title function_\">getOwn</span>(registry, id);\n\n            <span class=\"hljs-keyword\">if</span> (!mod) {\n                mod = registry[id] = <span class=\"hljs-keyword\">new</span> context.<span class=\"hljs-title class_\">Module</span>(depMap);\n            }\n\n            <span class=\"hljs-keyword\">return</span> mod;\n        }\n        <span class=\"hljs-comment\">// 构建Module类</span>\n        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">Module</span>(<span class=\"hljs-params\">map</span>){\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">events</span> = <span class=\"hljs-title function_\">getOwn</span>(undefEvents, map.<span class=\"hljs-property\">id</span>) || {};\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span> = map;\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">depExports</span> = [];\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">depMaps</span> = [];\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">depMatched</span> = [];  <span class=\"hljs-comment\">// 依赖是否已defined</span>\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">depCount</span> = <span class=\"hljs-number\">0</span>;\n        }\n        <span class=\"hljs-title class_\">Module</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = {\n            <span class=\"hljs-comment\">// 模块初始化</span>\n            <span class=\"hljs-attr\">init</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">depMaps, factory</span>){\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">inited</span>) {\n                    <span class=\"hljs-keyword\">return</span>;\n                }\n                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">factory</span> = factory;\n                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">inited</span> = <span class=\"hljs-literal\">true</span>;\n                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">depMaps</span> = depMaps || [];\n                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">enable</span>();\n            },\n            <span class=\"hljs-comment\">// 启用模块</span>\n            <span class=\"hljs-attr\">enable</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">enabled</span> = <span class=\"hljs-literal\">true</span>;\n                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">enabling</span> = <span class=\"hljs-literal\">true</span>;\n                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">depMaps</span>.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">depMap, i</span>) {\n                    <span class=\"hljs-keyword\">var</span> mode = <span class=\"hljs-literal\">null</span>;\n                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> depMap == <span class=\"hljs-string\">&quot;string&quot;</span>) {\n                        depMap = <span class=\"hljs-title function_\">makeModuleMap</span>(depMap, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>.<span class=\"hljs-property\">isDefine</span> ? <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span> : <span class=\"hljs-literal\">null</span>);\n                        mode = <span class=\"hljs-title function_\">getOwn</span>(registry, depMap.<span class=\"hljs-property\">id</span>);\n                        \n                        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">depCount</span> += <span class=\"hljs-number\">1</span>;\n                        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">depMaps</span>[i] = depMap;\n                        <span class=\"hljs-keyword\">var</span> fn = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">depExports</span>) {\n                            <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">depMatched</span>[i]) {\n                                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">depMatched</span>[i] = <span class=\"hljs-literal\">true</span>;\n                                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">depCount</span> -= <span class=\"hljs-number\">1</span>;\n                                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">depExports</span>[i] = depExports;\n                            }\n                            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">check</span>();\n                        }.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>)\n                        <span class=\"hljs-comment\">// 如果模块已经加载过</span>\n                        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">getOwn</span>(defined, depMap.<span class=\"hljs-property\">id</span>) &amp;&amp; mode.<span class=\"hljs-property\">defineEmitComplete</span>) {\n                            <span class=\"hljs-title function_\">fn</span>(defined[depMap.<span class=\"hljs-property\">id</span>]);\n                        } <span class=\"hljs-keyword\">else</span> {\n                            mode = <span class=\"hljs-title function_\">getModule</span>(depMap);\n                            <span class=\"hljs-comment\">// 绑定defined事件，监听依赖的载入，每一个依赖载入完成，模块都会收集依赖的exports，但所有的依赖载入完毕模块才会运行 </span>\n                            mode.<span class=\"hljs-title function_\">on</span>(<span class=\"hljs-string\">&quot;defined&quot;</span>, fn)  \n                        }\n                        mode = registry[depMap.<span class=\"hljs-property\">id</span>];\n                        <span class=\"hljs-keyword\">if</span> (mode &amp;&amp; !mode.<span class=\"hljs-property\">enabled</span>) {\n                            mode.<span class=\"hljs-title function_\">enable</span>()\n                        }\n                    }\n                }.<span class=\"hljs-title function_\">bind</span>(<span class=\"hljs-variable language_\">this</span>))\n                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">enabling</span> = <span class=\"hljs-literal\">false</span>;\n                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">check</span>();\n            },\n            <span class=\"hljs-comment\">// 执行模块</span>\n            <span class=\"hljs-attr\">check</span>:<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>){\n                <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">enabled</span> || <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">enabling</span>) {\n                    <span class=\"hljs-keyword\">return</span>;\n                }\n                <span class=\"hljs-keyword\">var</span> id = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>.<span class=\"hljs-property\">id</span>,\n                    depExports = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">depExports</span>,\n                    <span class=\"hljs-built_in\">exports</span> = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">exports</span>,\n                    factory = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">factory</span>;\n                <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">inited</span>) {\n                    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">load</span>(); <span class=\"hljs-comment\">//  </span>\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">defining</span>){\n                    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">defining</span> = <span class=\"hljs-literal\">true</span>;                               <span class=\"hljs-comment\">// defining下面代码每个模块只执行一次</span>\n                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isFunction</span>(factory)) {                          <span class=\"hljs-comment\">// 模块的factory只允许是函数</span>\n                                                                        <span class=\"hljs-comment\">// 只有模块的依赖全部执行完，才会运行factory</span>\n                        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">depCount</span> &lt; <span class=\"hljs-number\">1</span> &amp;&amp; !<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">defined</span>) {       <span class=\"hljs-comment\">// 只有暴露出exports defined属性才为true</span>\n                            <span class=\"hljs-built_in\">exports</span> = factory.<span class=\"hljs-title function_\">apply</span>(<span class=\"hljs-variable language_\">this</span>, depExports)\n                            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">exports</span> = <span class=\"hljs-built_in\">exports</span>;\n                            <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>.<span class=\"hljs-property\">isDefine</span>) {\n                                defined[id] = <span class=\"hljs-built_in\">exports</span>;\n                            }\n                            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">defined</span> = <span class=\"hljs-literal\">true</span>; \n                        }  \n                    }       \n                    <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">defining</span> = <span class=\"hljs-literal\">false</span>;\n                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">defined</span> &amp;&amp; !<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">defineEmitted</span>) {\n                        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">defineEmitted</span> = <span class=\"hljs-literal\">true</span>;\n                         \n                        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-title function_\">emit</span>(<span class=\"hljs-string\">&#x27;defined&#x27;</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">exports</span>);\n                        <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">defineEmitComplete</span> = <span class=\"hljs-literal\">true</span>;\n                    }\n                }    \n            },\n            <span class=\"hljs-title function_\">load</span>(<span class=\"hljs-params\"></span>){\n                <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">loaded</span>) {\n                    <span class=\"hljs-keyword\">return</span>;\n                }\n                <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">loaded</span> = <span class=\"hljs-literal\">true</span>;\n                <span class=\"hljs-keyword\">var</span> url = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>.<span class=\"hljs-property\">url</span>;\n\n                <span class=\"hljs-comment\">//Regular dependency.</span>\n                <span class=\"hljs-keyword\">if</span> (!urlLoaded[url]) {       \n                    urlLoaded[url] = <span class=\"hljs-literal\">true</span>;\n                    <span class=\"hljs-title function_\">loadScript</span>(context.<span class=\"hljs-property\">onScriptLoad</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">map</span>.<span class=\"hljs-property\">id</span>, url) \n                }\n            },\n            <span class=\"hljs-attr\">on</span>: <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">name, cb</span>) {\n                <span class=\"hljs-keyword\">var</span> cbs = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">events</span>[name];\n                <span class=\"hljs-keyword\">if</span> (!cbs) {\n                    cbs = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">events</span>[name] = [];\n                }\n                cbs.<span class=\"hljs-title function_\">push</span>(cb);\n            },\n            <span class=\"hljs-attr\">emit</span>: <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">name, data</span>){\n                <span class=\"hljs-keyword\">var</span> evts = <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">events</span>[name] || [];\n                evts.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">cb</span>){\n                    <span class=\"hljs-title function_\">cb</span>(data);\n                })\n            }\n        }\n        <span class=\"hljs-comment\">// 将globalQueue转入defQueue</span>\n        <span class=\"hljs-keyword\">function</span> <span class=\"hljs-title function_\">getGlobalQueue</span>(<span class=\"hljs-params\"></span>) {\n            <span class=\"hljs-comment\">//Push all the globalDefQueue items into the context&#x27;s defQueue</span>\n            <span class=\"hljs-keyword\">if</span> (globalDefQueue.<span class=\"hljs-property\">length</span>) {\n                globalDefQueue.<span class=\"hljs-title function_\">forEach</span>(<span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">queueItem</span>) {\n                    <span class=\"hljs-keyword\">var</span> id = queueItem[<span class=\"hljs-number\">0</span>];\n                    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> id === <span class=\"hljs-string\">&#x27;string&#x27;</span>) {\n                        context.<span class=\"hljs-property\">defQueueMap</span>[id] = <span class=\"hljs-literal\">true</span>;\n                    }\n                    defQueue.<span class=\"hljs-title function_\">push</span>(queueItem);\n                });\n                globalDefQueue = [];\n            }\n        }\n        context.<span class=\"hljs-property\">Module</span> = <span class=\"hljs-title class_\">Module</span>;\n        context.<span class=\"hljs-property\">require</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">deps, callback</span>){\n            <span class=\"hljs-comment\">//console.log(deps, callback)</span>\n            <span class=\"hljs-keyword\">var</span> requireMod = <span class=\"hljs-title function_\">getModule</span>(<span class=\"hljs-title function_\">makeModuleMap</span>(<span class=\"hljs-literal\">null</span>));\n            requireMod.<span class=\"hljs-title function_\">init</span>(deps, callback);\n        };\n        context.<span class=\"hljs-property\">onScriptLoad</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">evt</span>){\n            <span class=\"hljs-keyword\">if</span> (evt.<span class=\"hljs-property\">type</span> == <span class=\"hljs-string\">&quot;load&quot;</span>) {\n                <span class=\"hljs-keyword\">var</span> node = evt.<span class=\"hljs-property\">currentTarget</span> || evt.<span class=\"hljs-property\">srcElement</span>;\n                node.<span class=\"hljs-title function_\">removeEventListener</span>(<span class=\"hljs-string\">&#x27;load&#x27;</span>, context.<span class=\"hljs-property\">onScriptLoad</span>, <span class=\"hljs-literal\">false</span>);\n                <span class=\"hljs-keyword\">var</span> id = node.<span class=\"hljs-title function_\">getAttribute</span>(<span class=\"hljs-string\">&#x27;data-fwmodule&#x27;</span>)\n                context.<span class=\"hljs-title function_\">completeLoad</span>(id);\n            }\n        };\n        context.<span class=\"hljs-property\">completeLoad</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">moduleName</span>){\n            <span class=\"hljs-keyword\">var</span> found, args;\n            <span class=\"hljs-comment\">// 提取当前载入的模块</span>\n            <span class=\"hljs-title function_\">getGlobalQueue</span>();\n            <span class=\"hljs-keyword\">while</span> (defQueue.<span class=\"hljs-property\">length</span>) {\n                args = defQueue.<span class=\"hljs-title function_\">shift</span>();\n                <span class=\"hljs-keyword\">if</span> (args[<span class=\"hljs-number\">0</span>] === <span class=\"hljs-literal\">null</span>) {\n                    args[<span class=\"hljs-number\">0</span>] = moduleName;\n                    <span class=\"hljs-keyword\">if</span> (found) {\n                        <span class=\"hljs-keyword\">break</span>;\n                    }\n                    found = <span class=\"hljs-literal\">true</span>;\n                } <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (args[<span class=\"hljs-number\">0</span>] === moduleName) {\n                    found = <span class=\"hljs-literal\">true</span>;\n                }\n                <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title function_\">getOwn</span>(defined, args[<span class=\"hljs-number\">0</span>])) {\n                    <span class=\"hljs-comment\">// 依赖载入完成之后，对文件进行初始化</span>\n                    <span class=\"hljs-title function_\">getModule</span>(<span class=\"hljs-title function_\">makeModuleMap</span>(args[<span class=\"hljs-number\">0</span>], <span class=\"hljs-literal\">null</span>, <span class=\"hljs-literal\">true</span>)).<span class=\"hljs-title function_\">init</span>(args[<span class=\"hljs-number\">1</span>], args[<span class=\"hljs-number\">2</span>]);\n                }\n            }\n        }\n        <span class=\"hljs-keyword\">return</span> context;\n    }\n    <span class=\"hljs-comment\">// 入口的require函数</span>\n    req = fwjs = <span class=\"hljs-built_in\">require</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">deps, callback</span>) {\n        <span class=\"hljs-keyword\">var</span> context = {},\n            contextName = defContextName;\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-title function_\">isFunction</span>(deps)) {\n            deps = [];\n            callback = deps\n        }\n        context = <span class=\"hljs-title function_\">getOwn</span>(contexts, contextName);\n        <span class=\"hljs-keyword\">if</span> (!context){\n            context = contexts[contextName] = <span class=\"hljs-title function_\">createContext</span>();\n        }\n        <span class=\"hljs-keyword\">return</span> context.<span class=\"hljs-built_in\">require</span>(deps, callback)\n    }\n    <span class=\"hljs-comment\">// define只允许匿名模块</span>\n    define = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">deps, callback</span>){\n        <span class=\"hljs-keyword\">if</span> (!<span class=\"hljs-title function_\">isArray</span>(deps)) {\n            callback = deps;\n            deps = [];\n        }\n        <span class=\"hljs-keyword\">var</span> name = <span class=\"hljs-literal\">null</span>, context;\n        globalDefQueue.<span class=\"hljs-title function_\">push</span>([name, deps, callback]);\n        globalDefQueue[name] = <span class=\"hljs-literal\">true</span>;\n    }\n\n}(<span class=\"hljs-variable language_\">this</span>))\n\n\n<span class=\"hljs-comment\">// demo</span>\n<span class=\"hljs-comment\">// index.js</span>\n\n<span class=\"hljs-comment\">// require( [&quot;./src/app.js&quot;, &quot;./src/app1.js&quot;, &quot;./src/m/app2.js&quot;],</span>\n<span class=\"hljs-comment\">//     function(a, b, c) {</span>\n<span class=\"hljs-comment\">//         console.log(a, b, c)</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">// );</span>\n\n<span class=\"hljs-comment\">// app.js</span>\n\n<span class=\"hljs-comment\">// define(function () {</span>\n<span class=\"hljs-comment\">//     //Do setup work here</span>\n<span class=\"hljs-comment\">//     return {</span>\n<span class=\"hljs-comment\">//         name:&quot;app&quot;</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">// });</span>\n\n<span class=\"hljs-comment\">// app1.js</span>\n\n<span class=\"hljs-comment\">// define(function () {</span>\n<span class=\"hljs-comment\">//     //Do setup work here</span>\n<span class=\"hljs-comment\">//     return {</span>\n<span class=\"hljs-comment\">//         name: &quot;app1&quot;</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">// });</span>\n\n<span class=\"hljs-comment\">// m/app2.js</span>\n\n<span class=\"hljs-comment\">// define([&quot;./src/app.js&quot;],function (a) {</span>\n<span class=\"hljs-comment\">//     console.log(a)</span>\n<span class=\"hljs-comment\">//     //Do setup work here</span>\n<span class=\"hljs-comment\">//     return {</span>\n<span class=\"hljs-comment\">//         name:&quot;app2&quot;</span>\n<span class=\"hljs-comment\">//     }</span>\n<span class=\"hljs-comment\">// });</span>\n</code></pre>\n","fileName":"define"}