{"content":"<h1 id=\"call、apply、bind函数的实现\">call、apply、bind函数的实现</h1>\n<h2 id=\"说明\">说明</h2>\n<pre><code>call、apply、bind函数内部的this指向调用他们的函数，要将调用函数内部的this指向目标对象，则用目标对象调用该函数就可以了。\n\n如何调用函数呢？对象成功调用方法，肯定是该方法已经存在在对象上了，所以直接将this赋值给对象的一个属性，再调用就行了。\n\n参数处理： 用es6的语法处理是再好不过的了，这里要注意，箭头函数没有this，也没有arguments对象（这个对象来自父级函数作用域）\n</code></pre>\n<h2 id=\"实现\">实现</h2>\n<ul>\n<li><p>call</p>\n<p>  es5</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-title class_\">Function</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">call2</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">obj</span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">this</span> !== <span class=\"hljs-string\">&quot;function&quot;</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;need function&quot;</span>);\n    <span class=\"hljs-keyword\">const</span> context = obj || <span class=\"hljs-variable language_\">window</span>;\n    context.<span class=\"hljs-property\">fn</span> = <span class=\"hljs-variable language_\">this</span>;\n    <span class=\"hljs-keyword\">const</span> args = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">from</span>(<span class=\"hljs-variable language_\">arguments</span>).<span class=\"hljs-title function_\">splice</span>(<span class=\"hljs-number\">1</span>, <span class=\"hljs-variable language_\">arguments</span>.<span class=\"hljs-property\">length</span> - <span class=\"hljs-number\">1</span>);\n    <span class=\"hljs-keyword\">const</span> results = context.<span class=\"hljs-title function_\">fn</span>(args.<span class=\"hljs-title function_\">toString</span>());\n    <span class=\"hljs-keyword\">delete</span> context.<span class=\"hljs-property\">fn</span>;\n    <span class=\"hljs-keyword\">return</span> results;\n}\n</code></pre>\n<p>  es6</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-title class_\">Function</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">call3</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">obj, ...args</span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">this</span> !== <span class=\"hljs-string\">&quot;function&quot;</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;need function&quot;</span>);\n    <span class=\"hljs-keyword\">const</span> context = obj || <span class=\"hljs-variable language_\">window</span>;\n    context.<span class=\"hljs-property\">fn</span> = <span class=\"hljs-variable language_\">this</span>;\n    <span class=\"hljs-keyword\">const</span> results = context.<span class=\"hljs-title function_\">fn</span>(...args);\n    <span class=\"hljs-keyword\">delete</span> context.<span class=\"hljs-property\">fn</span>;\n    <span class=\"hljs-keyword\">return</span> results;\n}\n</code></pre>\n</li>\n<li><p>apply</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-title class_\">Function</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">apply2</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">obj, arr</span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">this</span> !== <span class=\"hljs-string\">&quot;function&quot;</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;need function&quot;</span>)\n    <span class=\"hljs-keyword\">const</span> context = obj || <span class=\"hljs-variable language_\">window</span>;\n    context.<span class=\"hljs-property\">fn</span> = <span class=\"hljs-variable language_\">this</span>;\n    <span class=\"hljs-keyword\">const</span> tempArr = <span class=\"hljs-title class_\">Array</span>.<span class=\"hljs-title function_\">isArray</span>(arr) ? arr : [];\n    <span class=\"hljs-keyword\">const</span> results = context.<span class=\"hljs-title function_\">fn</span>(...tempArr);\n    <span class=\"hljs-keyword\">delete</span> context.<span class=\"hljs-property\">fn</span>;\n    <span class=\"hljs-keyword\">return</span> results;\n}\n</code></pre>\n</li>\n<li><p>bind</p>\n<p>  bind需要注意使用bind生成的函数，除了普通调用之外，还需要可以作为构造函数使用new操作符创建实例对象。此时bind指定的this值会失效</p>\n<pre><code class=\"hljs js\"><span class=\"hljs-title class_\">Function</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">bind2</span> = <span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">obj, ...arr</span>) {\n    <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-keyword\">typeof</span> <span class=\"hljs-variable language_\">this</span> !== <span class=\"hljs-string\">&quot;function&quot;</span>) <span class=\"hljs-keyword\">throw</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Error</span>(<span class=\"hljs-string\">&quot;need function&quot;</span>)\n    <span class=\"hljs-keyword\">const</span> self = <span class=\"hljs-variable language_\">this</span>\n    <span class=\"hljs-keyword\">const</span> <span class=\"hljs-title class_\">Fn</span> = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) {}\n    <span class=\"hljs-keyword\">const</span> bindFn = <span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">...bindargs</span>){\n        <span class=\"hljs-keyword\">return</span> self.<span class=\"hljs-title function_\">apply</span>(self <span class=\"hljs-keyword\">instanceof</span> <span class=\"hljs-title class_\">Fn</span> ? self : obj, ...arr, ...bindargs)\n    } \n    <span class=\"hljs-title class_\">Fn</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = self.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>\n    bindFn.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Fn</span>();\n    <span class=\"hljs-keyword\">return</span> bindFn\n}\n</code></pre>\n</li>\n</ul>\n","fileName":"call&apply&bind"}