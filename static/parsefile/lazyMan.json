{"content":"<h1 id=\"实现lazyman\">实现lazyMan</h1>\n<h2 id=\"问题描述\">问题描述</h2>\n<pre><code>实现一个LazyMan，可以按照以下方式调用:\nLazyMan(&quot;man&quot;)输出:\nhi this is man!\n\nLazyMan(&quot;man&quot;).sleep(1000).eat(&quot;dinner&quot;)输出\nhi this is man!\nafter 1000 ms!\neat dinner~\n\nLazyMan(&quot;man&quot;).eat(&quot;dinner&quot;).eat(&quot;apple&quot;)输出\nhi this is man!\neat dinner~\neat apple~\n\nLazyMan(&quot;man&quot;).eat(&quot;dinner&quot;).sleepFirst(500)输出\nafter 500ms\nhi this is man!\neat dinner\n以此类推。\n</code></pre>\n<h2 id=\"es6实现\">Es6实现</h2>\n<pre><code class=\"hljs js\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">LazyMan</span> </span>{\n    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">name</span>)</span> {\n        <span class=\"hljs-built_in\">this</span>.task = []\n        <span class=\"hljs-comment\">// 第二次事件循环才调用next，此时task队列已经存入所有的链式函数</span>\n        <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.task)\n            <span class=\"hljs-comment\">// [ [Function: sleepFirst], [Function: sleep1], [Function: eat1] ]</span>\n            <span class=\"hljs-built_in\">this</span>.next()\n        })\n        <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;hi this is&#x27;</span>, name)\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">next</span>(<span class=\"hljs-params\"></span>)</span> {\n        <span class=\"hljs-keyword\">const</span> fn = <span class=\"hljs-built_in\">this</span>.task.shift()\n        fn &amp;&amp; fn()\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">eat</span>(<span class=\"hljs-params\">name</span>)</span> {\n        <span class=\"hljs-keyword\">const</span> eat1 = <span class=\"hljs-function\">() =&gt;</span> {\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;eat&#x27;</span>, name, <span class=\"hljs-string\">&#x27;~&#x27;</span>)\n            <span class=\"hljs-built_in\">this</span>.next()\n        }\n        <span class=\"hljs-built_in\">this</span>.task.push(eat1)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">clearTimer</span>(<span class=\"hljs-params\">timer</span>)</span> {\n        <span class=\"hljs-built_in\">clearTimeout</span>(timer)\n        timer = <span class=\"hljs-literal\">null</span>\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">sleep</span>(<span class=\"hljs-params\">time</span>)</span> {\n        <span class=\"hljs-keyword\">const</span> sleep1 = <span class=\"hljs-function\">() =&gt;</span> {\n            <span class=\"hljs-keyword\">let</span> timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`after <span class=\"hljs-subst\">${time}</span>ms`</span>)\n                <span class=\"hljs-built_in\">this</span>.clearTimer(timer)\n                <span class=\"hljs-built_in\">this</span>.next()\n            }, time)\n        }\n        <span class=\"hljs-built_in\">this</span>.task.push(sleep1)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>\n    }\n\n    <span class=\"hljs-function\"><span class=\"hljs-title\">sleepFst</span>(<span class=\"hljs-params\">time</span>)</span> {\n        <span class=\"hljs-keyword\">const</span> sleepFirst = <span class=\"hljs-function\">() =&gt;</span> {\n            <span class=\"hljs-keyword\">let</span> timer = <span class=\"hljs-built_in\">setTimeout</span>(<span class=\"hljs-function\">() =&gt;</span> {\n                <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`after <span class=\"hljs-subst\">${time}</span>ms`</span>)\n                <span class=\"hljs-built_in\">this</span>.clearTimer(timer)\n                <span class=\"hljs-built_in\">this</span>.next()\n            }, time)\n        }\n        <span class=\"hljs-built_in\">this</span>.task.unshift(sleepFirst)\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>\n    }\n}\n\n<span class=\"hljs-keyword\">const</span> _lazyMan = <span class=\"hljs-function\">(<span class=\"hljs-params\">name</span>) =&gt;</span> {\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> LazyMan(name)\n}\n\n_lazyMan(<span class=\"hljs-string\">&quot;man&quot;</span>).sleep(<span class=\"hljs-number\">200</span>).eat(<span class=\"hljs-string\">&quot;dinner&quot;</span>).sleepFst(<span class=\"hljs-number\">300</span>)\n\n<span class=\"hljs-comment\">// hi this is man</span>\n<span class=\"hljs-comment\">// after 300ms</span>\n<span class=\"hljs-comment\">// after 200ms</span>\n<span class=\"hljs-comment\">// eat dinner ~</span>\n</code></pre>\n<h2 id=\"总结\">总结</h2>\n<p><strong>考察</strong>： 闭包、事件循环、队列、链式调用 \n<strong>1.</strong> 如何让链式调用按照顺序依次调用？</p>\n<ul>\n<li>引入队列，每一次调用从头出队，调用完之后再调用this.next()执行下一次</li>\n</ul>\n<p><strong>2.</strong> 第一次this.next的调用时机？    </p>\n<ul>\n<li>第一次事件循环将所有的函数push到task队列  </li>\n<li>第二次事件循环执行next()调用函数</li>\n</ul>\n","fileName":"lazyMan"}