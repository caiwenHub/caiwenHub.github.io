{"content":"<h1 id=\"网络安全\">网络安全</h1>\n<h3 id=\"csrf跨站请求伪造\">CSRF跨站请求伪造</h3>\n<ul>\n<li>攻击细节</li>\n</ul>\n<p>跨站请求攻击，简单地说，是攻击者通过一些技术手段欺骗用户的浏览器去访问一个自己曾经认证过的网站并运行一些操作（如发邮件，发消息，甚至财产操作如转账和购买商品）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去运行。这利用了web中用户身份验证的一个漏洞：简单的身份验证只能保证请求发自某个用户的浏览器，却不能保证请求本身是用户自愿发出的。</p>\n<p>例子\n假如一家银行用以运行转账操作的URL地址如下：<a href=\"http://www.examplebank.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName\">http://www.examplebank.com/withdraw?account=AccoutName&amp;amount=1000&amp;for=PayeeName</a></p>\n<p>那么，一个恶意攻击者可以在另一个网站上放置如下代码： &lt;img src=&quot;<a href=\"http://www.examplebank.com/withdraw?account=Alice&amp;amount=1000&amp;for=Badman&quot;%5C&gt;\">http://www.examplebank.com/withdraw?account=Alice&amp;amount=1000&amp;for=Badman&quot;\\&gt;</a></p>\n<p>如果有账户名为Alice的用户访问了恶意站点，而她之前刚访问过银行不久，登录信息尚未过期，那么她就会损失1000资金。</p>\n<p>这种恶意的网址可以有很多种形式，藏身于网页中的许多地方。此外，攻击者也不需要控制放置恶意网址的网站。例如他可以将这种地址藏在论坛，博客等任何用户生成内容的网站中。这意味着如果服务端没有合适的防御措施的话，用户即使访问熟悉的可信网站也有受攻击的危险。</p>\n<p>透过例子能够看出，攻击者并不能通过CSRF攻击来直接获取用户的账户控制权，也不能直接窃取用户的任何信息。他们能做到的，是欺骗用户浏览器，让其以用户的名义运行操作。</p>\n<ul>\n<li>防御措施<blockquote>\n<p>检查Referer字段<br>添加token校验</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"xss跨站脚本攻击\">xss跨站脚本攻击</h3>\n<ul>\n<li>原理<br>HTML是一种超文本标记语言，通过将一些字符特殊地对待来区别文本和标记，例如，小于符号（&lt;）被看作是HTML标签的开始，<title>与</title>之间的字符是页面的标题等等。当动态页面中插入的内容含有这些特殊字符（如&lt;）时，用户浏览器会将其误认为是插入了HTML标签，当这些HTML标签引入了一段JavaScript脚本时，这些脚本程序就将会在用户浏览器中执行。所以，当这些特殊字符不能被动态页面检查或检查出现失误时，就将会产生XSS漏洞。</li>\n</ul>\n","fileName":"webSafe"}